{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dev/Desktop/marvel-quiz/src/components/Quiz/index.js\";\nimport React, { Component } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport { QuizMarvel } from \"../quizMarvel\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport QuizOver from \"../QuizOver\";\ntoast.configure();\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      levelsName: [\"debutant\", \"confirme\", \"expert\"],\n      quizLevel: 0,\n      maxQuestions: 10,\n      storedQuestions: [],\n      question: null,\n      options: [],\n      idQuestion: 0,\n      btnDisabled: true,\n      userAnswer: null,\n      score: 0,\n      showWelcomeMsg: false,\n      quizEnd: false\n    };\n    this.storedDataRef = /*#__PURE__*/React.createRef();\n\n    this.loadQuestions = quizz => {\n      const fetcheArrayQuiz = QuizMarvel[0].quizz[quizz];\n\n      if (fetcheArrayQuiz.length >= this.state.maxQuestions) {\n        this.storedDataRef.current = fetcheArrayQuiz;\n        const newArray = fetcheArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestions: newArray\n        });\n      } else {\n        console.log(\"Pas assez de questions\");\n      }\n    };\n\n    this.nextQuestion = () => {\n      if (this.state.idQuestion === this.state.maxQuestions - 1) {\n        this.gameOver();\n      } else {\n        this.setState(prevState => ({\n          idQuestion: prevState.idQuestion + 1\n        }));\n      }\n\n      const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n\n      if (this.state.userAnswer === goodAnswer) {\n        this.setState(prevState => ({\n          score: prevState.score + 1\n        }));\n        toast.success(\"Bravo +1\", {\n          position: \"top-right\",\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          boddyClassName: \"toastify-color\"\n        });\n      } else {\n        toast.error(\"RatÃ© 0\", {\n          position: \"top-right\",\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          boddyClassName: \"toastify-color\"\n        });\n      }\n    };\n\n    this.showWelcomeMsg = pseudo => {\n      if (!this.state.showWelcomeMsg) {\n        this.setState({\n          showWelcomeMsg: true\n        });\n        toast.warn(`Welcome ${pseudo}, et bonne chance!`, {\n          position: \"top-right\",\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: false\n        });\n      }\n    };\n\n    this.submitAnswer = selectedAnswer => {\n      this.setState({\n        userAnswer: selectedAnswer,\n        btnDisabled: false\n      });\n    };\n\n    this.gameOver = () => {\n      this.setState({\n        quizEnd: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuestions(this.state.levelsName[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.storedQuestions !== prevState.storedQuestions) {\n      this.setState({\n        question: this.state.storedQuestions[this.state.idQuestion].question,\n        options: this.state.storedQuestions[this.state.idQuestion].options\n      });\n    }\n\n    if (this.state.idQuestion !== prevState.idQuestion) {\n      this.setState({\n        question: this.state.storedQuestions[this.state.idQuestion].question,\n        options: this.state.storedQuestions[this.state.idQuestion].options,\n        userAnswer: null,\n        btnDisabled: true\n      });\n    }\n\n    if (this.props.userData.pseudo) {\n      this.showWelcomeMsg(this.props.userData.pseudo);\n    }\n  }\n\n  render() {\n    //const { pseudo } = this.props.userData;\n    const displayOptions = this.state.options.map((option, index) => {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: () => this.submitAnswer(option),\n        className: `answerOptions ${this.state.userAnswer === option ? \" selected\" : null}`,\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this);\n    });\n    this.state.q;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Levels, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: this.state.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), displayOptions, /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: this.state.btnDisabled,\n        className: \"btnSubmit\",\n        onClick: this.nextQuestion,\n        children: \"Suivant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/dev/Desktop/marvel-quiz/src/components/Quiz/index.js"],"names":["React","Component","toast","QuizMarvel","Levels","ProgressBar","QuizOver","configure","Quiz","state","levelsName","quizLevel","maxQuestions","storedQuestions","question","options","idQuestion","btnDisabled","userAnswer","score","showWelcomeMsg","quizEnd","storedDataRef","createRef","loadQuestions","quizz","fetcheArrayQuiz","length","current","newArray","map","answer","keepRest","setState","console","log","nextQuestion","gameOver","prevState","goodAnswer","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","boddyClassName","error","pseudo","warn","submitAnswer","selectedAnswer","componentDidMount","componentDidUpdate","prevProps","props","userData","render","displayOptions","option","index","q"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport { QuizMarvel } from \"../quizMarvel\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport QuizOver from \"../QuizOver\";\n\ntoast.configure();\n\nclass Quiz extends Component {\n  state = {\n    levelsName: [\"debutant\", \"confirme\", \"expert\"],\n    quizLevel: 0,\n    maxQuestions: 10,\n    storedQuestions: [],\n    question: null,\n    options: [],\n    idQuestion: 0,\n    btnDisabled: true,\n    userAnswer: null,\n    score: 0,\n    showWelcomeMsg: false,\n    quizEnd: false,\n  };\n\n  storedDataRef = React.createRef();\n\n  loadQuestions = (quizz) => {\n    const fetcheArrayQuiz = QuizMarvel[0].quizz[quizz];\n    if (fetcheArrayQuiz.length >= this.state.maxQuestions) {\n      this.storedDataRef.current = fetcheArrayQuiz;\n\n      const newArray = fetcheArrayQuiz.map(\n        ({ answer, ...keepRest }) => keepRest\n      );\n\n      this.setState({\n        storedQuestions: newArray,\n      });\n    } else {\n      console.log(\"Pas assez de questions\");\n    }\n  };\n\n  componentDidMount() {\n    this.loadQuestions(this.state.levelsName[this.state.quizLevel]);\n  }\n\n  nextQuestion = () => {\n    if (this.state.idQuestion === this.state.maxQuestions - 1) {\n      this.gameOver();\n    } else {\n      this.setState((prevState) => ({\n        idQuestion: prevState.idQuestion + 1,\n      }));\n    }\n\n    const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n    if (this.state.userAnswer === goodAnswer) {\n      this.setState((prevState) => ({\n        score: prevState.score + 1,\n      }));\n\n      toast.success(\"Bravo +1\", {\n        position: \"top-right\",\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        boddyClassName: \"toastify-color\",\n      });\n    } else {\n      toast.error(\"RatÃ© 0\", {\n        position: \"top-right\",\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        boddyClassName: \"toastify-color\",\n      });\n    }\n  };\n\n  showWelcomeMsg = (pseudo) => {\n    if (!this.state.showWelcomeMsg) {\n      this.setState({\n        showWelcomeMsg: true,\n      });\n      toast.warn(`Welcome ${pseudo}, et bonne chance!`, {\n        position: \"top-right\",\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: false,\n      });\n    }\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.storedQuestions !== prevState.storedQuestions) {\n      this.setState({\n        question: this.state.storedQuestions[this.state.idQuestion].question,\n        options: this.state.storedQuestions[this.state.idQuestion].options,\n      });\n    }\n\n    if (this.state.idQuestion !== prevState.idQuestion) {\n      this.setState({\n        question: this.state.storedQuestions[this.state.idQuestion].question,\n        options: this.state.storedQuestions[this.state.idQuestion].options,\n        userAnswer: null,\n        btnDisabled: true,\n      });\n    }\n\n    if (this.props.userData.pseudo) {\n      this.showWelcomeMsg(this.props.userData.pseudo);\n    }\n  }\n\n  submitAnswer = (selectedAnswer) => {\n    this.setState({\n      userAnswer: selectedAnswer,\n      btnDisabled: false,\n    });\n  };\n\n  gameOver = () => {\n    this.setState({ \n      quizEnd: true\n    });\n  };\n\n  render() {\n    //const { pseudo } = this.props.userData;\n    const displayOptions = this.state.options.map((option, index) => {\n      return (\n        <p\n          key={index}\n          onClick={() => this.submitAnswer(option)}\n          className={`answerOptions ${\n            this.state.userAnswer === option ? \" selected\" : null\n          }`}\n        >\n          {option}\n        </p>\n      );\n    });\n\n    this.state.q\n    return (\n      <div>\n        <Levels />\n        <ProgressBar />\n        <h2>{this.state.question}</h2>\n        {displayOptions}\n        <button\n          disabled={this.state.btnDisabled}\n          className=\"btnSubmit\"\n          onClick={this.nextQuestion}\n        >\n          Suivant\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}