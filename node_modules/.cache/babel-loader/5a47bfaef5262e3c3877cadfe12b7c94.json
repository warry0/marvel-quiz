{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dev/Desktop/marvel-quiz/src/components/Quiz/index.js\";\nimport React, { Component } from \"react\";\nimport { QuizMarvel } from \"../quizMarvel\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      levelsName: [\"debutant\", \"confirme\", \"expert\"],\n      quizLevel: 0,\n      maxQuestions: 10,\n      storedQuestions: [],\n      question: null,\n      option: [],\n      idQuestion: 0\n    };\n\n    this.loadQuestions = quizz => {\n      const fetcheArrayQuiz = QuizMarvel[0].quizz[quizz];\n\n      if (fetcheArrayQuiz.length >= this.state.maxQuestions) {\n        const newArray = fetcheArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestions: newArray\n        });\n      } else {\n        console.log(\"Pas assez de questions\");\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuestions(this.state.levelsName[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.storedQuestions !== prevState.storedQuestions) {\n      this.setState({\n        question: this.state.storedQuestions[this.state.idQuestion].question,\n        option: this.state.storedQuestions[this.state.idQuestion].option\n      });\n    }\n  }\n\n  render() {\n    //const { pseudo } = this.props.userData;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Levels, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: this.state.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"answerOptions\",\n        children: this\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"answerOptions\",\n        children: \"Question 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"answerOptions\",\n        children: \"Question 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"answerOptions\",\n        children: \"Question 4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btnSubmit\",\n        children: \"Suivant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/dev/Desktop/marvel-quiz/src/components/Quiz/index.js"],"names":["React","Component","QuizMarvel","Levels","ProgressBar","Quiz","state","levelsName","quizLevel","maxQuestions","storedQuestions","question","option","idQuestion","loadQuestions","quizz","fetcheArrayQuiz","length","newArray","map","answer","keepRest","setState","console","log","componentDidMount","componentDidUpdate","prevProps","prevState","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC3BK,KAD2B,GACnB;AACNC,MAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,QAAzB,CADN;AAENC,MAAAA,SAAS,EAAE,CAFL;AAGNC,MAAAA,YAAY,EAAE,EAHR;AAINC,MAAAA,eAAe,EAAE,EAJX;AAKNC,MAAAA,QAAQ,EAAE,IALJ;AAMNC,MAAAA,MAAM,EAAE,EANF;AAONC,MAAAA,UAAU,EAAE;AAPN,KADmB;;AAAA,SAW3BC,aAX2B,GAWVC,KAAD,IAAW;AACzB,YAAMC,eAAe,GAAGd,UAAU,CAAC,CAAD,CAAV,CAAca,KAAd,CAAoBA,KAApB,CAAxB;;AACA,UAAIC,eAAe,CAACC,MAAhB,IAA0B,KAAKX,KAAL,CAAWG,YAAzC,EAAuD;AACrD,cAAMS,QAAQ,GAAGF,eAAe,CAACG,GAAhB,CACf,CAAC;AAAEC,UAAAA,MAAF;AAAU,aAAGC;AAAb,SAAD,KAA6BA,QADd,CAAjB;AAIA,aAAKC,QAAL,CAAc;AACZZ,UAAAA,eAAe,EAAEQ;AADL,SAAd;AAGD,OARD,MAQO;AACLK,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD;AACF,KAxB0B;AAAA;;AA0B3BC,EAAAA,iBAAiB,GAAG;AAClB,SAAKX,aAAL,CAAmB,KAAKR,KAAL,CAAWC,UAAX,CAAsB,KAAKD,KAAL,CAAWE,SAAjC,CAAnB;AACD;;AAEDkB,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvC,QAAI,KAAKtB,KAAL,CAAWI,eAAX,KAA+BkB,SAAS,CAAClB,eAA7C,EAA8D;AAC1D,WAAKY,QAAL,CAAc;AACVX,QAAAA,QAAQ,EAAG,KAAKL,KAAL,CAAWI,eAAX,CAA2B,KAAKJ,KAAL,CAAWO,UAAtC,EAAkDF,QADnD;AAEVC,QAAAA,MAAM,EAAG,KAAKN,KAAL,CAAWI,eAAX,CAA2B,KAAKJ,KAAL,CAAWO,UAAtC,EAAkDD;AAFjD,OAAd;AAIH;AACF;;AAEDiB,EAAAA,MAAM,GAAG;AACP;AACA,wBACE;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,kBAAK,KAAKvB,KAAL,CAAWK;AAAhB;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAG,QAAA,SAAS,EAAC,eAAb;AAAA,kBAA8B;AAA9B;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAG,QAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAG,QAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAOE;AAAG,QAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AArD0B;;AAwD7B,eAAeN,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { QuizMarvel } from \"../quizMarvel\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\n\nclass Quiz extends Component {\n  state = {\n    levelsName: [\"debutant\", \"confirme\", \"expert\"],\n    quizLevel: 0,\n    maxQuestions: 10,\n    storedQuestions: [],\n    question: null,\n    option: [],\n    idQuestion: 0,\n  };\n\n  loadQuestions = (quizz) => {\n    const fetcheArrayQuiz = QuizMarvel[0].quizz[quizz];\n    if (fetcheArrayQuiz.length >= this.state.maxQuestions) {\n      const newArray = fetcheArrayQuiz.map(\n        ({ answer, ...keepRest }) => keepRest\n      );\n\n      this.setState({\n        storedQuestions: newArray,\n      });\n    } else {\n      console.log(\"Pas assez de questions\");\n    }\n  };\n\n  componentDidMount() {\n    this.loadQuestions(this.state.levelsName[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.storedQuestions !== prevState.storedQuestions) {\n        this.setState({\n            question : this.state.storedQuestions[this.state.idQuestion].question,\n            option:  this.state.storedQuestions[this.state.idQuestion].option\n        })\n    }\n  }\n\n  render() {\n    //const { pseudo } = this.props.userData;\n    return (\n      <div>\n        <Levels />\n        <ProgressBar />\n        <h2>{this.state.question}</h2>\n        <p className=\"answerOptions\">{this}</p>\n        <p className=\"answerOptions\">Question 2</p>\n        <p className=\"answerOptions\">Question 3</p>\n        <p className=\"answerOptions\">Question 4</p>\n        <button className=\"btnSubmit\">Suivant</button>\n      </div>\n    );\n  }\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}