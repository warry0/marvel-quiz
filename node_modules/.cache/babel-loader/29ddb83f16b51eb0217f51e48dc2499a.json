{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dev/Desktop/marvel-quiz/src/components/Quiz/index.js\";\nimport React, { Component } from \"react\";\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { QuizMarvel } from \"../quizMarvel\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\ntoast.configure();\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      levelsName: [\"debutant\", \"confirme\", \"expert\"],\n      quizLevel: 0,\n      maxQuestions: 10,\n      storedQuestions: [],\n      question: null,\n      options: [],\n      idQuestion: 0,\n      btnDisabled: true,\n      userAnswer: null,\n      score: 0\n    };\n    this.storedDataRef = /*#__PURE__*/React.createRef();\n\n    this.loadQuestions = quizz => {\n      const fetcheArrayQuiz = QuizMarvel[0].quizz[quizz];\n\n      if (fetcheArrayQuiz.length >= this.state.maxQuestions) {\n        this.storedDataRef.current = fetcheArrayQuiz;\n        const newArray = fetcheArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestions: newArray\n        });\n      } else {\n        console.log(\"Pas assez de questions\");\n      }\n    };\n\n    this.nextQuestion = () => {\n      if (this.state.idQuestion === this.state.maxQuestions - 1) {} else {\n        this.setState(prevState => ({\n          idQuestion: prevState.idQuestion + 1\n        }));\n      }\n\n      const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n\n      if (this.state.userAnswer === goodAnswer) {\n        this.setState(prevState => ({\n          score: prevState.score + 1\n        }));\n      }\n    };\n\n    this.showWelcomeMsg = pseudo => {\n      toast.warn(`Welcome ${pseudo}, `, {\n        position: \"top-right\",\n        autoClose: 4000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: false,\n        progress: undefined\n      });\n    };\n\n    this.submitAnswer = selectedAnswer => {\n      this.setState({\n        userAnswer: selectedAnswer,\n        btnDisabled: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuestions(this.state.levelsName[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.storedQuestions !== prevState.storedQuestions) {\n      this.setState({\n        question: this.state.storedQuestions[this.state.idQuestion].question,\n        options: this.state.storedQuestions[this.state.idQuestion].options\n      });\n    }\n\n    if (this.state.idQuestion !== prevState.idQuestion) {\n      this.setState({\n        question: this.state.storedQuestions[this.state.idQuestion].question,\n        options: this.state.storedQuestions[this.state.idQuestion].options,\n        userAnswer: null,\n        btnDisabled: true\n      });\n    }\n\n    if (this.props.userData.pseudo) {\n      this.showWelcomeMsg(this.props.userData.pseudo);\n    }\n  }\n\n  render() {\n    //const { pseudo } = this.props.userData;\n    const displayOptions = this.state.options.map((option, index) => {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: () => this.submitAnswer(option),\n        className: `answerOptions ${this.state.userAnswer === option ? \" selected\" : null}`,\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Levels, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: this.state.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), displayOptions, /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: this.state.btnDisabled,\n        className: \"btnSubmit\",\n        onClick: this.nextQuestion,\n        children: \"Suivant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/dev/Desktop/marvel-quiz/src/components/Quiz/index.js"],"names":["React","Component","toast","ToastContainer","QuizMarvel","Levels","ProgressBar","configure","Quiz","state","levelsName","quizLevel","maxQuestions","storedQuestions","question","options","idQuestion","btnDisabled","userAnswer","score","storedDataRef","createRef","loadQuestions","quizz","fetcheArrayQuiz","length","current","newArray","map","answer","keepRest","setState","console","log","nextQuestion","prevState","goodAnswer","showWelcomeMsg","pseudo","warn","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","submitAnswer","selectedAnswer","componentDidMount","componentDidUpdate","prevProps","props","userData","render","displayOptions","option","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {toast, ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport { QuizMarvel } from \"../quizMarvel\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\n\ntoast.configure();\n\nclass Quiz extends Component {\n  state = {\n    levelsName: [\"debutant\", \"confirme\", \"expert\"],\n    quizLevel: 0,\n    maxQuestions: 10,\n    storedQuestions: [],\n    question: null,\n    options: [],\n    idQuestion: 0,\n    btnDisabled: true,\n    userAnswer: null,\n    score: 0,\n  };\n\n  storedDataRef = React.createRef();\n\n  loadQuestions = (quizz) => {\n    const fetcheArrayQuiz = QuizMarvel[0].quizz[quizz];\n    if (fetcheArrayQuiz.length >= this.state.maxQuestions) {\n      this.storedDataRef.current = fetcheArrayQuiz;\n\n      const newArray = fetcheArrayQuiz.map(\n        ({ answer, ...keepRest }) => keepRest\n      );\n\n      this.setState({\n        storedQuestions: newArray,\n      });\n    } else {\n      console.log(\"Pas assez de questions\");\n    }\n  };\n\n  componentDidMount() {\n    this.loadQuestions(this.state.levelsName[this.state.quizLevel]);\n  }\n\n  nextQuestion = () => {\n    if (this.state.idQuestion === this.state.maxQuestions - 1) {\n    } else {\n      this.setState((prevState) => ({\n        idQuestion: prevState.idQuestion + 1,\n      }));\n    }\n\n    const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n    if (this.state.userAnswer === goodAnswer) {\n      this.setState((prevState) => ({\n        score: prevState.score + 1,\n      }));\n    }\n  };\n\n  showWelcomeMsg = pseudo => {\n    toast.warn(`Welcome ${pseudo}, `, {\n        position: \"top-right\",\n        autoClose: 4000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: false,\n        progress: undefined,\n        });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.storedQuestions !== prevState.storedQuestions) {\n      this.setState({\n        question: this.state.storedQuestions[this.state.idQuestion].question,\n        options: this.state.storedQuestions[this.state.idQuestion].options,\n      });\n    }\n\n    if(this.state.idQuestion !== prevState.idQuestion){\n        this.setState({\n            question: this.state.storedQuestions[this.state.idQuestion].question,\n        options: this.state.storedQuestions[this.state.idQuestion].options,\n        userAnswer: null,\n        btnDisabled: true\n        })\n    }\n\n    if(this.props.userData.pseudo){\n        this.showWelcomeMsg(this.props.userData.pseudo)\n    }\n  }\n\n  submitAnswer = (selectedAnswer) => {\n    this.setState({\n      userAnswer: selectedAnswer,\n      btnDisabled: false,\n    });\n  };\n\n  render() {\n    //const { pseudo } = this.props.userData;\n    const displayOptions = this.state.options.map((option, index) => {\n      return (\n        <p\n          key={index}\n          onClick={() => this.submitAnswer(option)}\n          className={`answerOptions ${\n            this.state.userAnswer === option ? \" selected\" : null\n          }`}\n        >\n          {option}\n        </p>\n      );\n    });\n    return (\n      <div>\n        <Levels />\n        <ProgressBar />\n        <h2>{this.state.question}</h2>\n        {displayOptions}\n        <button\n          disabled={this.state.btnDisabled}\n          className=\"btnSubmit\"\n          onClick={this.nextQuestion}\n        >\n          Suivant\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}