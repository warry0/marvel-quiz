{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dev/Desktop/marvel-quiz/src/components/Quiz/index.js\";\nimport React, { Component } from \"react\";\nimport { QuizMarvel } from \"../quizMarvel\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      levelsName: [\"debutant\", \"confirme\", \"expert\"],\n      quizLevel: 0,\n      maxQuestions: 10,\n      storedQuestions: [],\n      question: null,\n      options: [],\n      idQuestion: 0,\n      btnDisabled: true,\n      userAnswer: null,\n      score: 0\n    };\n\n    this.loadQuestions = quizz => {\n      const fetcheArrayQuiz = QuizMarvel[0].quizz[quizz];\n\n      if (fetcheArrayQuiz.length >= this.state.maxQuestions) {\n        const newArray = fetcheArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestions: newArray\n        });\n      } else {\n        console.log(\"Pas assez de questions\");\n      }\n    };\n\n    this.submitAnswer = selectedAnswer => {\n      this.setState({\n        userAnswer: selectedAnswer,\n        btnDisabled: false\n      });\n    };\n\n    this.nextQuestion = () => {\n      if (this.state.idQuestion === this.state.maxQuestions - 1) {} else {\n        this.setState(prevState => ({\n          idQuestion: prevState.idQuestion + 1\n        }));\n      } // + 1 score\n\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuestions(this.state.levelsName[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.storedQuestions !== prevState.storedQuestions) {\n      this.setState({\n        question: this.state.storedQuestions[this.state.idQuestion].question,\n        options: this.state.storedQuestions[this.state.idQuestion].options\n      });\n    }\n  }\n\n  render() {\n    //const { pseudo } = this.props.userData;\n    const displayOptions = this.state.options.map((option, index) => {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: () => this.submitAnswer(option),\n        className: `answerOptions ${this.state.userAnswer === option ? \" selected\" : null}`,\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Levels, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: this.state.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), displayOptions, /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: this.state.btnDisabled,\n        className: \"btnSubmit\",\n        onClick: this.nextQuestion,\n        children: \"Suivant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/dev/Desktop/marvel-quiz/src/components/Quiz/index.js"],"names":["React","Component","QuizMarvel","Levels","ProgressBar","Quiz","state","levelsName","quizLevel","maxQuestions","storedQuestions","question","options","idQuestion","btnDisabled","userAnswer","score","loadQuestions","quizz","fetcheArrayQuiz","length","newArray","map","answer","keepRest","setState","console","log","submitAnswer","selectedAnswer","nextQuestion","prevState","componentDidMount","componentDidUpdate","prevProps","render","displayOptions","option","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { QuizMarvel } from \"../quizMarvel\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\n\nclass Quiz extends Component {\n  state = {\n    levelsName: [\"debutant\", \"confirme\", \"expert\"],\n    quizLevel: 0,\n    maxQuestions: 10,\n    storedQuestions: [],\n    question: null,\n    options: [],\n    idQuestion: 0,\n    btnDisabled: true,\n    userAnswer: null,\n    score: 0\n  };\n\n  storedData\n\n  loadQuestions = (quizz) => {\n    const fetcheArrayQuiz = QuizMarvel[0].quizz[quizz];\n    if (fetcheArrayQuiz.length >= this.state.maxQuestions) {\n      const newArray = fetcheArrayQuiz.map(\n        ({ answer, ...keepRest }) => keepRest\n      );\n\n      this.setState({\n        storedQuestions: newArray,\n      });\n    } else {\n      console.log(\"Pas assez de questions\");\n    }\n  };\n\n  componentDidMount() {\n    this.loadQuestions(this.state.levelsName[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.storedQuestions !== prevState.storedQuestions) {\n      this.setState({\n        question: this.state.storedQuestions[this.state.idQuestion].question,\n        options: this.state.storedQuestions[this.state.idQuestion].options,\n      });\n    }\n  }\n\n  submitAnswer = (selectedAnswer) => {\n    this.setState({\n      userAnswer: selectedAnswer,\n      btnDisabled: false,\n    });\n  };\n\n  nextQuestion = () =>{\n      if(this.state.idQuestion === this.state.maxQuestions-1){\n\n      }else {\n          this.setState((prevState)=> ({\n              idQuestion: prevState.idQuestion + 1\n          }))\n      }\n\n      // + 1 score\n  }\n\n  render() {\n    //const { pseudo } = this.props.userData;\n    const displayOptions = this.state.options.map((option, index) => {\n      return (\n        <p\n          key={index}\n          onClick={() => this.submitAnswer(option)}\n          className={`answerOptions ${\n            this.state.userAnswer === option ? \" selected\" : null\n          }`}\n        >\n          {option}\n        </p>\n      );\n    });\n    return (\n      <div>\n        <Levels />\n        <ProgressBar />\n        <h2>{this.state.question}</h2>\n        {displayOptions}\n        <button \n            disabled={this.state.btnDisabled} \n            className=\"btnSubmit\"\n            onClick={this.nextQuestion}\n            >\n          Suivant\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}