{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dev/Desktop/marvel-quiz/src/components/Quiz/index.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport { QuizMarvel } from \"../quizMarvel/\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport QuizOver from \"../QuizOver\";\nimport { FaChevronRight } from \"react-icons/fa\";\ntoast.configure();\nconst initialState = {\n  quizLevel: 0,\n  maxQuestions: 10,\n  storedQuestions: [],\n  question: null,\n  options: [],\n  idQuestion: 0,\n  btnDisabled: true,\n  userAnswer: null,\n  score: 0,\n  showWelcomeMsg: false,\n  quizEnd: false,\n  percent: null\n};\nconst levelNames = [\"debutant\", \"confirme\", \"expert\"];\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadQuestions = quizz => {\n      const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n\n      if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n        this.storedDataRef.current = fetchedArrayQuiz;\n        const newArray = fetchedArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestions: newArray\n        });\n      }\n    };\n\n    this.showToastMsg = pseudo => {\n      if (!this.state.showWelcomeMsg) {\n        this.setState({\n          showWelcomeMsg: true\n        });\n        toast.warn(`Bienvenue ${pseudo}, et bonne chance!`, {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: false,\n          bodyClassName: \"toastify-color-welcome\"\n        });\n      }\n    };\n\n    this.nextQuestion = () => {\n      if (this.state.idQuestion === this.state.maxQuestions - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      } else {\n        this.setState(prevState => ({\n          idQuestion: prevState.idQuestion + 1\n        }));\n      }\n\n      const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n\n      if (this.state.userAnswer === goodAnswer) {\n        this.setState(prevState => ({\n          score: prevState.score + 1\n        }));\n        toast.success(\"Bravo +1\", {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\"\n        });\n      } else {\n        toast.error(\"RatÃ© 0\", {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\"\n        });\n      }\n    };\n\n    this.submitAnswer = selectedAnswer => {\n      this.setState({\n        userAnswer: selectedAnswer,\n        btnDisabled: false\n      });\n    };\n\n    this.getPercentage = (maxQuest, ourScore) => ourScore / maxQuest * 100;\n\n    this.gameOver = percent => {\n      if (percent >= 50) {\n        this.setState({\n          quizLevel: this.state.quizLevel + 1,\n          percent\n        });\n      } else {\n        this.setState({\n          percent\n        });\n      }\n    };\n\n    this.loadLevelQuestions = param => {\n      this.setState({ ...initialState,\n        quizLevel: param\n      });\n      this.loadQuestions(levelNames[param]);\n    };\n\n    this.state = initialState;\n    this.storedDataRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    this.loadQuestions(levelNames[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      maxQuestions,\n      storedQuestions,\n      idQuestion,\n      quizEnd,\n      score\n    } = this.state;\n\n    if (storedQuestions !== prevState.storedQuestions && storedQuestions.length) {\n      this.setState({\n        question: storedQuestions[idQuestion].question,\n        options: storedQuestions[idQuestion].options\n      });\n    }\n\n    if (idQuestion !== prevState.idQuestion && storedQuestions.length) {\n      this.setState({\n        question: storedQuestions[idQuestion].question,\n        options: storedQuestions[idQuestion].options,\n        userAnswer: null,\n        btnDisabled: true\n      });\n    }\n\n    if (quizEnd !== prevState.quizEnd) {\n      const gradepercent = this.getPercentage(maxQuestions, score);\n      this.gameOver(gradepercent);\n    }\n\n    if (this.props.userData.pseudo !== prevProps.userData.pseudo) {\n      this.showToastMsg(this.props.userData.pseudo);\n    }\n  }\n\n  render() {\n    const {\n      quizLevel,\n      maxQuestions,\n      question,\n      options,\n      idQuestion,\n      btnDisabled,\n      userAnswer,\n      score,\n      quizEnd,\n      percent\n    } = this.state;\n    const displayOptions = options.map((option, index) => {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `answerOptions ${userAnswer === option ? \"selected\" : null}`,\n        onClick: () => this.submitAnswer(option),\n        children: [/*#__PURE__*/_jsxDEV(FaChevronRight, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), \" \", option]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this);\n    });\n    return quizEnd ? /*#__PURE__*/_jsxDEV(QuizOver, {\n      ref: this.storedDataRef,\n      levelNames: levelNames,\n      score: score,\n      maxQuestions: maxQuestions,\n      quizLevel: quizLevel,\n      percent: percent,\n      loadLevelQuestions: this.loadLevelQuestions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Levels, {\n        levelNames: levelNames,\n        quizLevel: quizLevel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        idQuestion: idQuestion,\n        maxQuestions: maxQuestions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), displayOptions, /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: btnDisabled,\n        className: \"btnSubmit\",\n        onClick: this.nextQuestion,\n        children: idQuestion < maxQuestions - 1 ? \"Suivant\" : \"Terminer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/dev/Desktop/marvel-quiz/src/components/Quiz/index.js"],"names":["React","Component","Fragment","toast","QuizMarvel","Levels","ProgressBar","QuizOver","FaChevronRight","configure","initialState","quizLevel","maxQuestions","storedQuestions","question","options","idQuestion","btnDisabled","userAnswer","score","showWelcomeMsg","quizEnd","percent","levelNames","Quiz","constructor","props","loadQuestions","quizz","fetchedArrayQuiz","length","state","storedDataRef","current","newArray","map","answer","keepRest","setState","showToastMsg","pseudo","warn","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","bodyClassName","nextQuestion","prevState","goodAnswer","success","error","submitAnswer","selectedAnswer","getPercentage","maxQuest","ourScore","gameOver","loadLevelQuestions","param","createRef","componentDidMount","componentDidUpdate","prevProps","gradepercent","userData","render","displayOptions","option","index"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport { QuizMarvel } from \"../quizMarvel/\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport QuizOver from \"../QuizOver\";\nimport { FaChevronRight } from \"react-icons/fa\";\n\ntoast.configure();\n\nconst initialState = {\n  quizLevel: 0,\n  maxQuestions: 10,\n  storedQuestions: [],\n  question: null,\n  options: [],\n  idQuestion: 0,\n  btnDisabled: true,\n  userAnswer: null,\n  score: 0,\n  showWelcomeMsg: false,\n  quizEnd: false,\n  percent: null,\n};\n\nconst levelNames = [\"debutant\", \"confirme\", \"expert\"];\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    this.storedDataRef = React.createRef();\n  }\n\n  loadQuestions = (quizz) => {\n    const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n    if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n      this.storedDataRef.current = fetchedArrayQuiz;\n\n      const newArray = fetchedArrayQuiz.map(\n        ({ answer, ...keepRest }) => keepRest\n      );\n\n      this.setState({ storedQuestions: newArray });\n    }\n  };\n\n  showToastMsg = (pseudo) => {\n    if (!this.state.showWelcomeMsg) {\n      this.setState({ showWelcomeMsg: true });\n\n      toast.warn(`Bienvenue ${pseudo}, et bonne chance!`, {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: false,\n        bodyClassName: \"toastify-color-welcome\",\n      });\n    }\n  };\n\n  componentDidMount() {\n    this.loadQuestions(levelNames[this.state.quizLevel]);\n  }\n\n  nextQuestion = () => {\n    if (this.state.idQuestion === this.state.maxQuestions - 1) {\n      this.setState({ quizEnd: true });\n    } else {\n      this.setState((prevState) => ({ idQuestion: prevState.idQuestion + 1 }));\n    }\n\n    const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n    if (this.state.userAnswer === goodAnswer) {\n      this.setState((prevState) => ({ score: prevState.score + 1 }));\n\n      toast.success(\"Bravo +1\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        bodyClassName: \"toastify-color\",\n      });\n    } else {\n      toast.error(\"RatÃ© 0\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        bodyClassName: \"toastify-color\",\n      });\n    }\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      maxQuestions,\n      storedQuestions,\n      idQuestion,\n      quizEnd,\n      score,\n    } = this.state;\n\n    if (\n      storedQuestions !== prevState.storedQuestions &&\n      storedQuestions.length\n    ) {\n      this.setState({\n        question: storedQuestions[idQuestion].question,\n        options: storedQuestions[idQuestion].options,\n      });\n    }\n\n    if (idQuestion !== prevState.idQuestion && storedQuestions.length) {\n      this.setState({\n        question: storedQuestions[idQuestion].question,\n        options: storedQuestions[idQuestion].options,\n        userAnswer: null,\n        btnDisabled: true,\n      });\n    }\n\n    if (quizEnd !== prevState.quizEnd) {\n      const gradepercent = this.getPercentage(maxQuestions, score);\n      this.gameOver(gradepercent);\n    }\n\n    if (this.props.userData.pseudo !== prevProps.userData.pseudo) {\n      this.showToastMsg(this.props.userData.pseudo);\n    }\n  }\n\n  submitAnswer = (selectedAnswer) => {\n    this.setState({\n      userAnswer: selectedAnswer,\n      btnDisabled: false,\n    });\n  };\n\n  getPercentage = (maxQuest, ourScore) => (ourScore / maxQuest) * 100;\n\n  gameOver = (percent) => {\n    if (percent >= 50) {\n      this.setState({\n        quizLevel: this.state.quizLevel + 1,\n        percent,\n      });\n    } else {\n      this.setState({ percent });\n    }\n  };\n\n  loadLevelQuestions = (param) => {\n    this.setState({ ...initialState, quizLevel: param });\n\n    this.loadQuestions(levelNames[param]);\n  };\n\n  render() {\n    const {\n      quizLevel,\n      maxQuestions,\n      question,\n      options,\n      idQuestion,\n      btnDisabled,\n      userAnswer,\n      score,\n      quizEnd,\n      percent,\n    } = this.state;\n\n    const displayOptions = options.map((option, index) => {\n      return (\n        <p\n          key={index}\n          className={`answerOptions ${\n            userAnswer === option ? \"selected\" : null\n          }`}\n          onClick={() => this.submitAnswer(option)}\n        >\n          <FaChevronRight /> {option}\n        </p>\n      );\n    });\n\n    return quizEnd ? (\n      <QuizOver\n        ref={this.storedDataRef}\n        levelNames={levelNames}\n        score={score}\n        maxQuestions={maxQuestions}\n        quizLevel={quizLevel}\n        percent={percent}\n        loadLevelQuestions={this.loadLevelQuestions}\n      />\n    ) : (\n      <Fragment>\n        <Levels levelNames={levelNames} quizLevel={quizLevel} />\n\n        <ProgressBar idQuestion={idQuestion} maxQuestions={maxQuestions} />\n        <h2>{question}</h2>\n\n        {displayOptions}\n\n        <button\n          disabled={btnDisabled}\n          className=\"btnSubmit\"\n          onClick={this.nextQuestion}\n        >\n          {idQuestion < maxQuestions - 1 ? \"Suivant\" : \"Terminer\"}\n        </button>\n      </Fragment>\n    );\n  }\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}